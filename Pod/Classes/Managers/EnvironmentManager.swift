//
//  Environment.swift
//  Table XI
//
//  Created by Ed Lafoy on 8/5/15.
//  Copyright Â© 2015 Table XI. All rights reserved.
//

import Foundation

// The Environment protocol is used to parse the data from the Environments.plist file
public protocol Environment: Equatable {
  var name: String { get set }
  var domain: String { get set }
  init?(environment: [String: AnyObject])
}

/// This class manages the environment using data read from the Environments.plist file
/// Environments.plist is generated by the ios_deploy gem when running 'deploy' or 'provision'
public struct EnvironmentManager<T: Environment> {
  
  private let userDefaultsKey = "environment"
  private var userDefaults = UserDefaults.standard
  private var bundle: Bundle
  
  public var environments = [T]()
  public var currentEnvironment: T! {
    get {
      if let name = self.userDefaults.object(forKey: self.userDefaultsKey) as? String, let savedEnvironment = self.environments.filter({ $0.name == name }).first {
        return savedEnvironment
      }
      return self.environments.first!
    }
    set {
      self.userDefaults.setValue(newValue.name, forKey: self.userDefaultsKey)
    }
  }
  
  public init(userDefaults: UserDefaults = UserDefaults.standard, bundle: Bundle = Bundle.main) {
    self.userDefaults = userDefaults
    self.bundle = bundle
    self.environments = self.loadEnvironments()
  }
  
  ///Loads the environments from Environments.plist into the 'environments' property.
  private func loadEnvironments() -> [T] {
    var environments = [T]()
    guard let path = self.bundle.path(forResource: "Environments", ofType: "plist") else {
      assert(false, "Environments.plist does not exist!")
      return environments
    }
    guard let environmentValues = NSArray(contentsOfFile: path) as? [[String: AnyObject]], environmentValues.count > 0 else {
      assert(false, "No environments found!")
      return environments
    }
    for value in environmentValues {
      guard let environment = T(environment: value) else {
        assert(false, "Environment invalid: \(value)")
        return environments
      }
      environments.append(environment)
    }
    return environments
  }
  
}


